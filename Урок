# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

#выработка=time, ставка в час=workprice, премия=prize
import sys

try:
    file,time,workprice,prize = sys.argv
except ValueError:
    print("Ошибка")
    exit()
time=int(time)
workprice=int(workprice)
prize=int(prize)
salary=(time * workprice)+prize

def calculate(salary):
    try:
        return salary
    except TypeError:
        return

print(int(salary))

# Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

total_list=[]
list=[int(element) for element in input("Введите список >>>").split()]
for element in range(1,len(list)):
    if list[element]>list[element-1]:
        (total_list.append(list[element]))
print("Исходный список: ", list)
print("Список, элементы которого больше предыдущего: ", total_list)

# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

list = [x for x in range(20,241) if (x%20==0 or x%21==0)]

print(list)

# Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]


list = [2, 2, 4, 4, 15, 15, 100]
print("Исходные элементы списка:\n", list)
newlist = [x for x in list if list.count(x) == 1]
print("Элементы списка, не имеющие повторений:\n", newlist)


# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
list = range(100,1001,2)

def amount_func(x,y):
    return x*y

total = reduce(amount_func,list)

print(total)

# Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не
# должен быть бесконечным. Предусмотрите условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
# Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from itertools import count
for x in count(1,1):
    if x>1000:
        break
    print(x)

print("Готово")

from itertools import cycle

c=0
for x in cycle("tommomomo"):
    if c>3:
        break
    print(x)
    c+=1

# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом:
# for el in fact(n). Она отвечает за получение факториала числа.
# В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial
def generator(n):
    for el in range(n):
        yield factorial(el)

for el in generator(7):
    print(el)
    
